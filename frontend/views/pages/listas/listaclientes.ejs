<title>Lista de clientes</title>
<%- include('../../partials/headdashboard'); %>
<body>
  <div class="container my-5 py-3 mx-auto px-4 md:px-6 lg:px-12">
    <button class="btn btn-success mb-4" onclick="mostrarModalCrearCliente()">Registrar cliente</button>
    <section>  
      <div class="card">
        <div class="card-body">
          <table class="table mb-0" id="tabla-clientes">
            <thead class="table-light">
              <tr>
                <th scope="col">Nombre</th>
                <th scope="col">Cedula</th>
                <th scope="col">Status</th>
                <th scope="col">Rol</th>
                <th scope="col">Acciones</th>
              </tr>
            </thead>
            <tbody id="tablaDatos">
              <% listaclientes.forEach((clientes) => { %>
              <tr>
                <th scope="row">
                  <div class="d-flex align-items-center">
                    <img
                      class="rounded-circle me-3"
                      src="<%= clientes.imgUser %>"
                      alt="Avatar"
                      style="width: 50px; height: 50px;"
                    />
                    <div>
                      <p class="mb-1"><%= clientes.nombre %> <%= clientes.apellido %></p>
                    </div>
                  </div>
                </th>
                <td><%= clientes.cedula %></td>
                <td><span class="badge bg-success">Active</span></td>
                <td><%= clientes.rol %></td>
                <td>
                  <button type="button" class="btn btn-primary me-2" onclick="mostrarModalEditarCliente('<%= clientes.id %>',this)">Editar</button>
                  <!-- Botón para abrir ventana modal de eliminación -->
                  <button type="button" class="btn btn-danger" onclick="eliminarCliente('<%= clientes.id %>',this)">
                    Eliminar
                  </button>
                </td>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>
    </section>
  </div>


  <!-- Ventana modal para registrar -->
  <div class="modal fade" id="registrarModal" tabindex="-1" aria-labelledby="registrarModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="registrarModalLabel">Datos del cliente</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="formulario-cliente" action="" method="post" class="needs-validation" novalidate>
            <div class="">
              <div class="space-y-4">
                <h5>Registro</h5>

                <div class="row">
                  
                  <div class="form-group col-md-6">
                    <label for="cedula">Documento de identidad</label>
                    <input type="number" class="form-control" id="cedula" name="cedula">
                    <div class="error-formulario error-cedula">El documento es requerido</div>
                  </div>

                  
                  <div class="form-group col-md-6">
                    <label for="rol">Rol</label>
                    <select class="form-select" name="rol" id="rol">
                      <option value="admin">admin</option>
                      <option value="cliente">cliente</option>
                    </select>
                    <div class="error-formulario error-rol">El Rol es requerido</div>
                  </div>

                  <div class="row m-0 p-0 mt-3">
                    <div class="form-group col-md-6">
                      <label for="nombre">Nombre</label>
                      <input type="text" class="form-control" id="nombre" name="nombre">
                      <div class="error-formulario error-nombre">El nombre es requerido</div>
                    </div>

                    <div class="form-group col-md-6">
                      <label for="apellido">Apellido</label>
                      <input type="text" class="form-control" id="apellido" name="apellido">
                      <div class="error-formulario error-apellido">El apellido es requerido</div>
                    </div>
                  </div>

                  <div class="form-group mt-3">
                    <label for="fechadenacimiento">Fecha de nacimiento</label>
                    <input type="date" class="form-control" id="fechadenacimiento" name="fechadenacimiento" min="1920-04-01" max="2008-01-01">
                    <div class="error-formulario error-fechadenacimiento">La fecha de nacimiento es requerida</div>
                  </div>

                  <div class="form-group mt-3">
                    <label for="email">Email</label>
                    <input type="email" class="form-control" id="email" name="email"/>
                    <div class="error-formulario error-email">El email es requerido</div>
                  </div>

                  <div class="form-group mt-3">
                    <label for="telefono">Telefono</label>
                    <input type="number" class="form-control" id="telefono" name="telefono" max="9999999999" min="1000000000"/>
                    <div class="error-formulario error-telefono">El telefono es requerido</div>
                  </div>
                  <div class="form-group mt-3">
                    <label for="password">Password</label>
                    <input type="password" class="form-control"  id="password" name="password"/>
                    <div class="error-formulario error-password">La contraseña es requerida</div>
                  </div>

                </div>
              </div>

            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
              <button type="submit" class="btn btn-primary" id="boton-enviar">Registrar</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>


<script>

  // inicializo la tabla con la libreria datatable con los registros
  $('#tabla-clientes').DataTable({pageLength : 7});

  const formulario = document.getElementById('formulario-cliente');

  const tablaDatos = document.getElementById('tablaDatos');

  function eliminarCliente(identificacion,boton){

    // muestro un modal de confirmacion para verificar si el usuario quiero eliminar al cliente

    Swal.fire({
      title: "Estas seguro?",
      text: "No podras revertir esto!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Si, eliminar"
    }).then(async (result) => {
      if (result.isConfirmed) {
        // cuando entra es por que se dio click en el boton de eliminar
        try {
          const r = await fetch('/api/v1/eliminarcliente/'+identificacion, {method:'DELETE'});
          const respuesta = await r.json();

          // si el backend me devuelve que la operacion fue exitosa muestro una alerta de exito si no de error
          if(respuesta.ok){
            
            Swal.fire({
              title: "Eliminado!",
              text: "El cliente fue eliminado con exito.",
              icon: "success"
            });

            // elimino la fila de la tabla del registro que estoy eliminando
            $(boton).closest('tr').remove();

          }else{
            Swal.fire({
              icon: "error",
              title: "Error...",
              text: "Error al eliminar el cliente!"
            });
          } 


        } catch (error) {
          Swal.fire({
            icon: "error",
            title: "Error...",
            text: "Error al eliminar el cliente, intentalo mas tarde!"
          });
        }
        
       
      }
    });
    
  }

  let url = "";

  function mostrarModalCrearCliente(){
    // muestro el modal y cambio la url donde va a realizar la peticion al backend
    url = "/api/v1/crearcliente";
    $("#registrarModal").modal('show');
    $("#boton-enviar").text("Registrar");

    // limpiamos los campos del formulario para que queden vacios
    $(formulario).trigger('reset');

 
  }

  formulario.addEventListener('submit',async (e)=>{

      e.preventDefault();
      const {tieneErrores,datos} = validacion();
      
      if(tieneErrores) return

      try {
        //hacemos una peticion al servidor dependiendo si es crear o editar segun la url y enviamos los datos
        const r = await fetch(url,{
          method:'POST',
          headers:{
            'content-type':'application/json'
          },
          body:JSON.stringify(datos)
        });

        const datosDB = await r.json();

        //validamos si la operacion en la base de datos fue exitosa
        if(datosDB.ok){

          Swal.fire({
              title: "Exito!",
              text: datosDB.datos,
              icon: "success"
          });
          //recargamos la pagina del navegador
          window.location.reload();
        }else{
          let errorDB = "";

          // recorremos el array de errores para que se pueda mostrar como html
          if(Array.isArray(datosDB.errores)){
            datosDB.errores.forEach(er=>{
              errorDB+='<p> *'+er +'</p>';
            })
          }else{
            errorDB = datosDB.datos ?? "No se logro completar la solicitud";
          }

          Swal.fire({
            icon: "error",
            title: "Error...",
            html: errorDB
          });
        }
      } catch (error) {

        Swal.fire({
          icon: "error",
          title: "Error...",
          text: 'Intentalo mas tarde'
        });
      }
  })

  async function mostrarModalEditarCliente(identificacion,boton){
    try {
        // obtengo el cliente en la base por el id para mostrar los datos en el formulario
        const r = await fetch('/api/v1/obtenercliente/'+identificacion);
        const datos = await r.json();
        
        if(datos.ok && datos.datos){

          url = "/api/v1/actualizarcliente/"+identificacion;

          let {cedula,rol,nombre,apellido,fechadenacimiento,email,password,telefono} = datos.datos;

          // formateo la fecha de nacimiento en formato Año-mes-dia
          fechadenacimiento = (typeof(fechadenacimiento) === 'string' && fechadenacimiento.includes('T')) ? fechadenacimiento.split('T')[0] : fechadenacimiento;
          
          // les pongo el valor a cada input del formulario
          $(`[name="cedula"]`).val(cedula);
          $(`[name="rol"]`).val(rol);
          $(`[name="nombre"]`).val(nombre);
          $(`[name="apellido"]`).val(apellido);
          $(`[name="fechadenacimiento"]`).val(fechadenacimiento);
          $(`[name="email"]`).val(email);
          $(`[name="password"]`).val(password);
          $(`[name="telefono"]`).val(telefono);

          // muestro el modal y le cambio el texto al boton de Registrar a Editar
          $("#registrarModal").modal('show');
          $("#boton-enviar").text("Editar");

        }else{
          Swal.fire({
            icon: "error",
            title: "Error...",
            text: "No se logro obtener el cliente!"
          });
        }

    } catch (error) {
      console.log('error',error)
      Swal.fire({
        icon: "error",
        title: "Error...",
        text: "No se logro obtener el cliente!"
      });
    }

    

  }

  function validacion(){
    // obtengo los datos del formulario y lo convierto en un objeto para validarlos ej: {"nombre":"fulano","apellido":"zoria","cedula":"342"}
    const datos = Object.fromEntries((new FormData(formulario)).entries());
    
    let tieneErrores = false;

    // recorro los datos del objeto para validar si el dato es vacio y si esta vacio muestro el div asociado al error
    Object.keys(datos).forEach(campo=>{
      const error = formulario.querySelector(`.error-${campo}`);
      if(datos[campo] === "" || datos[campo] === null || datos[campo] === undefined){
        if(error){
          error.classList.add('tiene-error');
        }
        tieneErrores = true;
      }else{

        if(error){
          error.classList.remove('tiene-error');
        }
      }
    })

    // retorno un objeto con los datos del formulario y si tiene errores o no

    return {
      tieneErrores,
      datos
    };
  }

</script>

</body>
</html>